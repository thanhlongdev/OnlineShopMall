/*
 * This file is generated by jOOQ.
 */
package vn.thanhlong.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import vn.thanhlong.db.Keys;
import vn.thanhlong.db.Onlineshopmall;
import vn.thanhlong.db.tables.records.CatalogRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Catalog extends TableImpl<CatalogRecord> {

    private static final long serialVersionUID = -1226790462;

    /**
     * The reference instance of <code>onlineshopmall.catalog</code>
     */
    public static final Catalog CATALOG = new Catalog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CatalogRecord> getRecordType() {
        return CatalogRecord.class;
    }

    /**
     * The column <code>onlineshopmall.catalog.id</code>.
     */
    public final TableField<CatalogRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>onlineshopmall.catalog.name</code>.
     */
    public final TableField<CatalogRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>onlineshopmall.catalog.parent_id</code>.
     */
    public final TableField<CatalogRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>onlineshopmall.catalog</code> table reference
     */
    public Catalog() {
        this(DSL.name("catalog"), null);
    }

    /**
     * Create an aliased <code>onlineshopmall.catalog</code> table reference
     */
    public Catalog(String alias) {
        this(DSL.name(alias), CATALOG);
    }

    /**
     * Create an aliased <code>onlineshopmall.catalog</code> table reference
     */
    public Catalog(Name alias) {
        this(alias, CATALOG);
    }

    private Catalog(Name alias, Table<CatalogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Catalog(Name alias, Table<CatalogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Catalog(Table<O> child, ForeignKey<O, CatalogRecord> key) {
        super(child, key, CATALOG);
    }

    @Override
    public Schema getSchema() {
        return Onlineshopmall.ONLINESHOPMALL;
    }

    @Override
    public Identity<CatalogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CATALOG;
    }

    @Override
    public UniqueKey<CatalogRecord> getPrimaryKey() {
        return Keys.KEY_CATALOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<CatalogRecord>> getKeys() {
        return Arrays.<UniqueKey<CatalogRecord>>asList(Keys.KEY_CATALOG_PRIMARY);
    }

    @Override
    public Catalog as(String alias) {
        return new Catalog(DSL.name(alias), this);
    }

    @Override
    public Catalog as(Name alias) {
        return new Catalog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Catalog rename(String name) {
        return new Catalog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Catalog rename(Name name) {
        return new Catalog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
